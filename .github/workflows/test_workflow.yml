# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Canvara CICD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  checkout:

    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: slack message notification for the start of the job
        uses: docker://technosophos/slack-notify
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: Backend workflow triggered by "${{ github.event.commits[0].committer.name }}" for the changes "${{ github.event.commits[0].message }} "${{ github.event.commits[0].url }}"
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        id: checkout
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ hashFiles('pip_requirements.txt') }}
        
      - name: Install dependencies
        id: dependencies
        run: |
          python -m pip install --upgrade pip
          #pip install -r pip_requirements.txt
      - name: Run test message
        run: |
          pwd
      - name: slack message notification
        id: slack_success
        uses: docker://technosophos/slack-notify
        env: 
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: Backend Stage Deploy for the commit, ${{ github.sha }} is Successful!!
          
      - name: slack message notification on failure
        id: slack_failure
        if: failure()
        uses: docker://technosophos/slack-notify
        env: 
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: Backend Deploy  for the commit, ${{ github.sha }} Failed!!
          
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#cicd-updates'
        if: always()

  one:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
        run: echo "$MATRIX_CONTEXT"
